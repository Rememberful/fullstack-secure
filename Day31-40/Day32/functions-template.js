// ====================================================
// üåü JAVASCRIPT FUNCTIONS ‚Äî COMPLETE TEMPLATE
// ====================================================

// üîπ 1Ô∏è‚É£ BASIC FUNCTION DECLARATION
function greet() {
  console.log("Hello, welcome to JavaScript Functions!");
}
greet(); // ‚úÖ Function call

// üîπ 2Ô∏è‚É£ FUNCTION WITH PARAMETERS
function greetUser(name) {
  console.log("Hello, " + name + "!");
}
greetUser("Aditya");

// üîπ 3Ô∏è‚É£ FUNCTION WITH RETURN VALUE
function add(a, b) {
  return a + b;
}
let sum = add(5, 10);
console.log("Sum:", sum);

// üîπ 4Ô∏è‚É£ FUNCTION EXPRESSION
// Functions can be stored in variables
const multiply = function (x, y) {
  return x * y;
};
console.log("Multiply:", multiply(3, 4));

// üîπ 5Ô∏è‚É£ ARROW FUNCTIONS (ES6)
const divide = (a, b) => {
  return a / b;
};
console.log("Divide:", divide(20, 5));

// üîπ 6Ô∏è‚É£ ARROW FUNCTION (Single line, implicit return)
const square = n => n * n;
console.log("Square:", square(6));

// üîπ 7Ô∏è‚É£ DEFAULT PARAMETERS
function greetCountry(country = "India") {
  console.log(`Hello from ${country}!`);
}
greetCountry(); // Uses default
greetCountry("Japan");

// üîπ 8Ô∏è‚É£ FUNCTION WITH MULTIPLE PARAMETERS
function userDetails(name, age, city) {
  console.log(`Name: ${name}, Age: ${age}, City: ${city}`);
}
userDetails("Aditya", 21, "Delhi");

// üîπ 9Ô∏è‚É£ REST PARAMETERS (...args)
function showNumbers(...numbers) {
  console.log("Numbers:", numbers);
}
showNumbers(1, 2, 3, 4, 5);

// üîπ üîü FUNCTION SCOPE (Local vs Global)
let globalVar = "I am global";

function testScope() {
  let localVar = "I am local";
  console.log(globalVar); // Accessible
  console.log(localVar); // Accessible
}
testScope();
// console.log(localVar); // ‚ùå Error: localVar is not defined

// üîπ 11Ô∏è‚É£ NESTED FUNCTIONS
function outer() {
  function inner() {
    console.log("I am inside the outer function");
  }
  inner();
}
outer();

// üîπ 12Ô∏è‚É£ FUNCTION RETURNING FUNCTION (Closure)
function makeMultiplier(factor) {
  return function (num) {
    return num * factor;
  };
}
const double = makeMultiplier(2);
console.log("Double:", double(10)); // 20

// üîπ 13Ô∏è‚É£ IMMEDIATELY INVOKED FUNCTION EXPRESSION (IIFE)
(function () {
  console.log("IIFE executed immediately!");
})();

// üîπ 14Ô∏è‚É£ CALLBACK FUNCTION
function processUserInput(callback) {
  let name = "Aditya";
  callback(name);
}
processUserInput(function (name) {
  console.log("Hello, " + name);
});

// üîπ 15Ô∏è‚É£ ARROW FUNCTIONS AS CALLBACKS
setTimeout(() => console.log("Arrow callback executed!"), 1000);

// üîπ 16Ô∏è‚É£ ANONYMOUS FUNCTIONS
setTimeout(function () {
  console.log("Anonymous function called after 2 seconds");
}, 2000);

// üîπ 17Ô∏è‚É£ FUNCTION HOISTING
hoisted(); // ‚úÖ Works (function declarations are hoisted)
function hoisted() {
  console.log("This function is hoisted!");
}

// üîπ 18Ô∏è‚É£ PURE FUNCTION (Good Practice)
function pureAdd(a, b) {
  return a + b; // No side effects
}
console.log("Pure Function:", pureAdd(2, 3));

// üîπ 19Ô∏è‚É£ IMPURE FUNCTION (Bad Practice)
let total = 0;
function impureAdd(a) {
  total += a; // modifies external variable
  return total;
}
console.log("Impure Function:", impureAdd(5));

// üîπ 20Ô∏è‚É£ GOOD PRACTICES
// ‚úÖ Use clear, meaningful names
// ‚úÖ Keep functions small and focused
// ‚úÖ Return values instead of printing (more reusable)
// ‚úÖ Use arrow functions for short callbacks
// ‚úÖ Avoid polluting global scope
// ‚úÖ Use default/rest parameters wisely

// üîπ 21Ô∏è‚É£ BAD PRACTICES
// ‚ùå Function does too many things
// ‚ùå Unclear naming
// ‚ùå Global variable modification
// ‚ùå Using `var` instead of `let`/`const`
// ‚ùå No return statements when needed

// üîπ 22Ô∏è‚É£ SECURITY PRACTICES
// ‚ö†Ô∏è Never use `eval()` ‚Äî executes arbitrary code, unsafe
// ‚ö†Ô∏è Validate input types before using them
// ‚ö†Ô∏è Don‚Äôt rely on user-provided data for logic without checks

// Example: Bad
function runUserCode(userInput) {
  // ‚ùå Dangerous ‚Äî executes arbitrary JS code
  // eval(userInput);
}

// Example: Good
function safeRun(userInput) {
  if (typeof userInput === "string") {
    console.log("Processing safe string:", userInput);
  }
}

// üîπ 23Ô∏è‚É£ ADVANCED: ARROW FUNCTION LIMITATIONS
// ‚ùå No own 'this' or 'arguments' binding
const obj = {
  name: "Aditya",
  regularFunc: function () {
    console.log("Regular:", this.name);
  },
  arrowFunc: () => {
    console.log("Arrow:", this.name); // 'this' not bound correctly
  }
};
obj.regularFunc(); // ‚úÖ Works
obj.arrowFunc(); // ‚ö†Ô∏è Undefined

// ====================================================
// ‚úÖ END OF FILE
// ====================================================
